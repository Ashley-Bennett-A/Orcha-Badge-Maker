{"version":3,"sources":["Components/MainPage/badge.jpg","Components/MainPage/badge2.jpg","Components/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","photos","src","badge","badge2","initialState","toptext","bottomtext","lefttext","isTopDragging","isBottomDragging","topY","topX","leftY","leftX","bottomX","bottomY","MainPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","objectSpread","currentImage","modalIsOpen","currentImagebase64","toggle","changeText","event","defineProperty","currentTarget","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","_this2","newHeight","react_default","className","map","key","style","cursor","alt","onClick","role","reactstrap_es","isOpen","id","ref","el","xmlns","xmlnsXlink","xlinkHref","fontFamily","fontSize","textTransform","fill","userSelect","zIndex","x","y","dominantBaseline","textAnchor","for","placeholder","onChange","React","Component","App","Components_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4c1c634.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/badge.a645a05c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/badge2.71700ba7.jpg\";","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  Label,\r\n  NavbarBrand\r\n} from \"reactstrap\";\r\n\r\nimport badge from \"./badge.jpg\";\r\nimport badge2 from \"./badge2.jpg\";\r\n\r\nconst photos = [{ src: badge }, { src: badge2 }];\r\n\r\nconst initialState = {\r\n  toptext: \"\",\r\n  bottomtext: \"\",\r\n  lefttext: \"\",\r\n  isTopDragging: false,\r\n  isBottomDragging: false,\r\n  topY: \"84%\",\r\n  topX: \"80%\",\r\n  leftY: \"84%\",\r\n  leftX: \"25%\",\r\n  bottomX: \"50%\",\r\n  bottomY: \"96%\"\r\n};\r\n\r\nclass MainPage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentImage: 0,\r\n      modalIsOpen: false,\r\n      currentImagebase64: null,\r\n      ...initialState\r\n    };\r\n  }\r\n\r\n  openImage = index => {\r\n    const image = photos[index];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    const base64 = this.getBase64Image(base_image);\r\n    this.setState(prevState => ({\r\n      currentImage: index,\r\n      modalIsOpen: !prevState.modalIsOpen,\r\n      currentImagebase64: base64,\r\n      ...initialState\r\n    }));\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modalIsOpen: !prevState.modalIsOpen\r\n    }));\r\n  };\r\n\r\n  changeText = event => {\r\n    this.setState({\r\n      [event.currentTarget.name]: event.currentTarget.value\r\n    });\r\n  };\r\n\r\n  getStateObj = (e, type) => {\r\n    let rect = this.imageRef.getBoundingClientRect();\r\n    const xOffset = e.clientX - rect.left;\r\n    const yOffset = e.clientY - rect.top;\r\n    let stateObj = {};\r\n    if (type === \"bottom\") {\r\n      stateObj = {\r\n        isBottomDragging: true,\r\n        isTopDragging: false,\r\n        bottomX: `${xOffset}px`,\r\n        bottomY: `${yOffset}px`\r\n      };\r\n    } else if (type === \"top\") {\r\n      stateObj = {\r\n        isTopDragging: true,\r\n        isBottomDragging: false,\r\n        topX: `${xOffset}px`,\r\n        topY: `${yOffset}px`\r\n      };\r\n    }\r\n    return stateObj;\r\n  };\r\n\r\n  handleMouseDown = (e, type) => {\r\n    const stateObj = this.getStateObj(e, type);\r\n    document.addEventListener(\"mousemove\", event =>\r\n      this.handleMouseMove(event, type)\r\n    );\r\n    this.setState({\r\n      ...stateObj\r\n    });\r\n  };\r\n\r\n  handleMouseMove = (e, type) => {\r\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\r\n      let stateObj = {};\r\n      if (type === \"bottom\" && this.state.isBottomDragging) {\r\n        stateObj = this.getStateObj(e, type);\r\n      } else if (type === \"top\" && this.state.isTopDragging) {\r\n        stateObj = this.getStateObj(e, type);\r\n      }\r\n      this.setState({\r\n        ...stateObj\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = event => {\r\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.setState({\r\n      isTopDragging: false,\r\n      isBottomDragging: false\r\n    });\r\n  };\r\n\r\n  convertSvgToImage = () => {\r\n    const svg = this.svgRef;\r\n    let svgData = new XMLSerializer().serializeToString(svg);\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"id\", \"canvas\");\r\n    const svgSize = svg.getBoundingClientRect();\r\n    canvas.width = svgSize.width;\r\n    canvas.height = svgSize.height;\r\n    const img = document.createElement(\"img\");\r\n    img.setAttribute(\r\n      \"src\",\r\n      \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData)))\r\n    );\r\n    img.onload = function() {\r\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n      const canvasdata = canvas.toDataURL(\"image/png\");\r\n      const a = document.createElement(\"a\");\r\n      a.download = \"badge.png\";\r\n      a.href = canvasdata;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n    };\r\n  };\r\n\r\n  getBase64Image(img) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n    var dataURL = canvas.toDataURL(\"image/png\");\r\n    return dataURL;\r\n  }\r\n\r\n  render() {\r\n    const image = photos[this.state.currentImage];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    var wrh = base_image.width / base_image.height;\r\n    var newWidth = 600;\r\n    var newHeight = newWidth / wrh;\r\n    const textStyleLeft = {\r\n      fontFamily: \"Roboto\",\r\n      fontSize: \"40px\",\r\n      textTransform: \"uppercase\",\r\n      fill: \"#FFF\",\r\n      // fontWeight: 600,\r\n\r\n      // stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    };\r\n    const textStyleTop = {\r\n      fontFamily: \"Roboto\",\r\n      fontSize: \"70px\",\r\n      // textTransform: \"uppercase\",\r\n      fill: \"#FFF\",\r\n      // fontWeight: 600,\r\n\r\n      // stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    };\r\n\r\n    const textStyleBottom = {\r\n      fontFamily: \"Roboto\",\r\n      fontSize: \"50px\",\r\n      // fontWeight: 700,\r\n      // textTransform: \"uppercase\",\r\n      fill: \"#23608c\",\r\n      // stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"main-content\">\r\n          <div className=\"content\">\r\n            {photos.map((image, index) => (\r\n              <div className=\"image-holder\" key={image.src}>\r\n                <img\r\n                  style={{\r\n                    width: \"100%\",\r\n                    cursor: \"pointer\",\r\n                    height: \"100%\"\r\n                  }}\r\n                  alt={index}\r\n                  src={image.src}\r\n                  onClick={() => this.openImage(index)}\r\n                  role=\"presentation\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\r\n          <ModalHeader toggle={this.toggle}>Orcha Badge Maker</ModalHeader>\r\n          <ModalBody>\r\n            <svg\r\n              width={newWidth}\r\n              id=\"svg_ref\"\r\n              height={newHeight}\r\n              ref={el => {\r\n                this.svgRef = el;\r\n              }}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            >\r\n              <image\r\n                ref={el => {\r\n                  this.imageRef = el;\r\n                }}\r\n                xlinkHref={this.state.currentImagebase64}\r\n                height={newHeight}\r\n                width={newWidth}\r\n              />\r\n              <text\r\n                style={{\r\n                  ...textStyleLeft,\r\n                  zIndex: this.state.isTopDragging ? 4 : 1\r\n                }}\r\n                x={this.state.leftX}\r\n                y={this.state.leftY}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n              >\r\n                {this.state.lefttext}\r\n              </text>\r\n\r\n              <text\r\n                style={{\r\n                  ...textStyleTop,\r\n                  zIndex: this.state.isTopDragging ? 4 : 1\r\n                }}\r\n                x={this.state.topX}\r\n                y={this.state.topY}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n              >\r\n                {this.state.toptext}\r\n              </text>\r\n              <text\r\n                style={textStyleBottom}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                x={this.state.bottomX}\r\n                y={this.state.bottomY}\r\n              >\r\n                {this.state.bottomtext}\r\n              </text>\r\n            </svg>\r\n            <div className=\"meme-form\">\r\n              <FormGroup>\r\n                <Label for=\"toptext\">Review Score</Label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"toptext\"\r\n                  id=\"toptext\"\r\n                  placeholder=\"79%\"\r\n                  onChange={this.changeText}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"lefttext\">Review Year</Label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"lefttext\"\r\n                  id=\"lefttext\"\r\n                  placeholder=\"2019 RATING\"\r\n                  onChange={this.changeText}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"bottomtext\">App Version</Label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"bottomtext\"\r\n                  id=\"bottomtext\"\r\n                  placeholder=\"IOS Version 1.0\"\r\n                  onChange={this.changeText}\r\n                />\r\n              </FormGroup>\r\n              <button\r\n                onClick={() => this.convertSvgToImage()}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Download\r\n              </button>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\r\nimport MainPage from './Components/MainPage';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MainPage />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}